Very draft version :)
Ruby version: 1.9
Gems required: sqlite3, nokogiri, open-uri, htmlentities

Basic Rake steps workflow (run rake -T for the whole list of available tasks)

# Create cache folders and SQLite DB
rake setup:init

# OPTIONAL step: by default whole Switzerland timetables are fetched
#           if you want it only for a smaller area, run the following command
#           'bounds' parameter contains 4 values, separated by comma:
#               corner SW longitude,corner SW latitude,corner NE longitude,corner NE latitude
rake station:set_bounds bounds=8.53,47.41,8.61,47.46

# Discovers the stations in the studied area
rake station:fetch

# OPTIONAL step: exports the stations in tmp/station.csv for visualizing data (i.e. in QGIS)
rake station:export

# OPTIONAL step(although recommended): remove the stations outside of Switzerland's borders
rake station:geo_clean

# Fetches from SBB, the files containing departures for each station
rake departure:fetch

# Removes the files that contains errors. If any files are mentioned, you have to run again the previous step
rake departure:files_clean

# Inserts the timetables in DB  
rake timetable:parse

# Remove timetable duplicates (based on departure, vehicle_id, destination)
rake timetable:remove_duplicates

# Remove stops of the stations that are now known (outside of Switzerland)
rake timetable:remove_notknown_stations

# Determine the station type from the timetables
rake station:parse_type

# OPTIONAL step: exports the stations in tmp/station.csv for visualizing data (i.e. in QGIS)
rake station:export

# OPTIONAL step: optimize the DB
rake db:vacuum

# Build the vehicle table based on departures
rake vehicle:insert

# Update the vehicle table with info for each vehicle and insert arrivals at destination in the timetables 
rake vehicle:build

